---
interface Props{
    className:string;
    attributes:string;
    data:any;
}

const { attributes, className,data} = Astro.props;

const modelDynamic = JSON.parse(data);
const attributeOptions = JSON.parse(attributes)

const dataAttributes = attributeOptions && attributeOptions.Data ? attributeOptions.Data : "{}";
let dataAttribut = "";

// Convertir atributos al formato HTML
if (dataAttributes && dataAttributes.trim() !== "{}") {
    const parsedData = JSON.parse(dataAttributes);
    dataAttribut = Object.entries(parsedData).reduce((acc, current) => {
        let value = typeof current[1] === "string" 
            ? current[1].replace(/"/g, "&quot;").replace(/'/g, "&#39;") 
            : current[1];
        return acc + ` ${current[0]}="${value}"`; // Usar 'value' en lugar de 'current[1]'
    }, "");
    console.log(dataAttribut)
}
---

<div class={className + " load-image-container"}
     data-video={modelDynamic.resource}
     data-setup={modelDynamic.setup}
     data-custom-class={modelDynamic.class_name}
     data-type={modelDynamic.type}
     data-id={modelDynamic.id}
>
    <div class="loader-icon top-1/2 left-1/2 w-1/4 h-1/4 transform -translate-x-1/2 -translate-y-1/2">
        <div class="lds-facebook block relative m-auto bg-transparent w-full h-full">
            <div></div><div></div><div></div>
        </div>
    </div>

    <img alt={modelDynamic.temporary_image.resource.alt} 
         data-src={modelDynamic.temporary_image.resource.src} 
         src="" 
         data-webp-src={modelDynamic.temporary_image.resource.srcWebp || ""}
         class={modelDynamic.temporary_image.className + " lazy absolute top-0 left-0 w-full h-full"} 
         width={modelDynamic.temporary_image.resource.width} 
         height={modelDynamic.temporary_image.resource.height} 
    />
</div>


<style>
    .video-dimensions.vjs-fluid,
    .video-js {
      /*padding-top: 56.9%;*/
      width: 100%;
    }
  
    .section-video__img-temp {
      max-width: 100%;
      object-fit: contain;
      opacity: 1;
      z-index: 1;
    }
  
    .ct-video > .oxygen-vsb-responsive-video-wrapper > img {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  
    .ct-video > .oxygen-vsb-responsive-video-wrapper > iframe {
      opacity: 0;
      z-index: 0;
    }
  
    .hide-video-image {
      animation-name: hideVideoimage;
      animation-duration: 0.5s;
      animation-fill-mode: forwards;
    }
  
    .show-video-frame {
      animation: showVideoframe 0.5s forwards;
    }
  
    @keyframes hideVideoimage {
      from {
        visibility: visible;
        opacity: 1;
        z-index: 1;
      }
  
      to {
        visibility: Hidden;
        opacity: 0;
        z-index: 0;
      }
    }
  
    @keyframes showVideoframe {
      from {
        opacity: 0;
        z-index: 0;
      }
  
      to {
        opacity: 1;
        z-index: 1;
      }
    }
  </style>
  <script>
    // Importaciones de m√≥dulos
    import { initiVideoLazy } from "@controllers/videoLazy";
    document.addEventListener(
        "DOMContentLoaded",
        function () {
          initiVideoLazy();
        },
        false
      );
  </script>